import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME) //аннотация жива на момент работы JVM, и не игнорируется
@Target(ElementType.METHOD) //применяется к методу
public @interface DataProcessor {
}


/*

------ПОЯСНЕНИЕ------
Тип хранения
Под "типом хранения" понимается стадия до которой "доживает" наша аннотация внутри класса. Каждая аннотация имеет только
один из возможных "типов хранения" указанный в классе RetentionPolicy:

SOURCE - аннотация используется только при написании кода и игнорируется компилятором (т.е. не сохраняется после компиляции).
    Обычно используется для каких-либо препроцессоров (условно), либо указаний компилятору
CLASS - аннотация сохраняется после компиляции, однако игнорируется JVM (т.е. не может быть использована во время выполнения).
    Обычно используется для каких-либо сторонних сервисов, подгружающих ваш код в качестве plug-in приложения
RUNTIME - аннотация которая сохраняется после компиляции и подгружается JVM (т.е. может использоваться во время выполнения самой программы).
    Используется в качестве меток в коде, которые напрямую влияют на ход выполнения программы (пример будет рассмотрен в данной статье)


Тип объекта над которым указывается
Данное описание стоит понимать практически буквально, т.к. в Java аннотации могут указываться над чем угодно
(Поля, классы, функции, т.д.) и для каждой аннотации указывается, над чем конкретно она может быть задана.
Здесь уже нет правила "что-то одно", аннотацию можно указывать над всем ниже перечисленным, либо же выбрать только нужные
элементы класса ElementType:

ANNOTATION_TYPE - другая аннотация
CONSTRUCTOR - конструктор класса
FIELD - поле класса
LOCAL_VARIABLE - локальная переменная
METHOD - метод класса
PACKAGE - описание пакета package
PARAMETER - параметр метода public void hello(@Annontation String param){}
TYPE - указывается над классом
 */
